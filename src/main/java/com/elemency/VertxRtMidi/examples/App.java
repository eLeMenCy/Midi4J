/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.elemency.VertxRtMidi.examples;

import com.elemency.VertxRtMidi.MidiIn;
import com.elemency.VertxRtMidi.MidiOut;
import com.elemency.VertxRtMidi.RtMidiDriver.RtMidi;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.nio.IntBuffer;

import static java.lang.String.valueOf;

public class App extends KeepAppRunning {
    private final Logger logger = LoggerFactory.getLogger(App.class);
    private MidiIn midi4jIn = null;
    private MidiOut midi4jOut = null;

    /**
     * Midi In lambda Callback
     *
     * @param timeStamp     The time at which the message has been received.
     * @param message       The midi message.
     * @param messageSize   Size of the Midi message.
     * @param userData      Additional user data.
     */
    private final MidiIn.MidiInCallback process = (timeStamp, message, messageSize, userData) -> {
        // Byte array to receive the event from native pointer.
        byte[] data = new byte[messageSize.intValue()];
        if (!doQuit) {
            // Read native memory data into our data byte array.
            message.read(0, data, 0, messageSize.intValue());

            if ((data[0] & 0xFF) == 144 && data[1] == 39) {
                logger.info("quitting...");
                doQuit();
                return;
            }

            midi4jOut.sendMessage(data, messageSize.intValue());

            String log = valueOf(timeStamp);
            for (int i = 0; i < messageSize.intValue(); i++) {
                if (i == 0) {
                    int status = data[i] & 0xFF;
                    log += ", 0x" + Integer.toHexString(status) + "(" + status + ")";
                } else {
                    log += ", " + data[i];
                }
            }
            logger.debug(log);
        }
    };

    public static void main(String[] args) throws Exception {
            App midiInApp = new App();
            midiInApp.Init();
    }

    @Override
    protected void Init() throws Exception {

        try (
                MidiOut midi4jOut = new MidiOut(RtMidi.Api.LINUX_ALSA.getIntValue(), "Midi4J");
                MidiIn midi4jIn = new MidiIn(RtMidi.Api.LINUX_ALSA.getIntValue(), "Midi4J", 100)
//                MidiOut midi4jOut = new MidiOut();
//                MidiIn midi4jIn = new MidiIn();
        ) {

            this.midi4jIn = midi4jIn;
            this.midi4jOut = midi4jOut;

            this.midi4jIn.listConnectablePorts();
            this.midi4jIn.openPort("IN", 1, true);

            this.midi4jOut.listConnectablePorts();
            this.midi4jOut.openPort("OUT", 0, false);

            this.midi4jIn.setClientName("Tester");
            this.midi4jIn.setPortName("My IN");
            this.midi4jOut.setClientName("Tester");
            this.midi4jOut.setPortName("My OUT");

            this.midi4jIn.setCallback(process, "native", null);

            System.out.println("\nis cltTesterIn Port Open: " + midi4jIn.isPortOpen());
            System.out.println("is cltTesterOut Port Open: " + midi4jOut.isPortOpen());

            keepRunning();

//        } catch( MidiException me) {
//            System.out.println(me);
//
//        } catch( Exception e) {
//            System.out.println("bye...");
//
        }
    }
}
