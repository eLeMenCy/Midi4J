/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.elemency.Midi4J.examples;

import com.elemency.Midi4J.MidiException;
import com.elemency.Midi4J.MidiIn;
import com.elemency.Midi4J.MidiOut;
import com.elemency.Midi4J.RtMidiDriver.RtMidi;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import static java.lang.String.valueOf;

public class App extends KeepAppRunning {
    private final Logger logger = LoggerFactory.getLogger(App.class);
    private MidiIn midi4jIn = null;
    private MidiOut midi4jOut = null;

    /**
     * Midi In lambda Callback
     *
     * @param timeStamp     The time at which the message has been received.
     * @param message       The midi message.
     * @param messageSize   Size of the Midi message.
     * @param userData      Additional user data.
     */
    private final MidiIn.MidiInCallback process = (timeStamp, message, messageSize, userData) -> {
        // Byte array to receive the event from native pointer.
        byte[] data = new byte[messageSize.intValue()];
        if (!doQuit) {
            // Read native memory data into our data byte array.
            message.read(0, data, 0, messageSize.intValue());

            //data -> Byte 0 = 144, Byte 1 = 77, Byte 2 = 0, stamp = 0.107015

            if ((data[0] & 0xFF) == 144 && data[1] == 39) {
                logger.info("quitting...");
                doQuit();
                return;
            }

            midi4jOut.sendMessage(data, messageSize.intValue());

            String log = "";
            for (int i = 0; i < messageSize.intValue(); i++) {
                if (i == 0) {
                    int status = data[i] & 0xFF;
                    log += "Byte 0 = 0x" + Integer.toHexString(status) + "(" + status + "), ";
                } else {
                    log += "Byte " + i + " = " + data[i] + ", ";
                }
            }
            log += "Stamp = " + String.format("%1.10s", timeStamp);

            logger.debug(log);
        }
    };

    public static void main(String[] args) throws Exception {
            App midiInApp = new App();
            midiInApp.Init();
    }

    @Override
    protected void Init() throws Exception {


        try (
                MidiOut midi4jOut = new MidiOut(RtMidi.Api.UNIX_JACK.getIntValue(), "Midi4J");
                MidiIn midi4jIn = new MidiIn(RtMidi.Api.LINUX_ALSA.getIntValue(), "Midi4J", 100)
//                MidiOut midi4jOut = new MidiOut();
//                MidiIn midi4jIn = new MidiIn();
        ) {

            this.midi4jIn = midi4jIn;
            this.midi4jOut = midi4jOut;

            System.out.println("Out device count: "+ this.midi4jIn.getDeviceCount());
            System.out.println("In device count: "+ this.midi4jOut.getDeviceCount());

            this.midi4jIn.listDevices();
            this.midi4jIn.connect("IN", 2, true);

            this.midi4jOut.listDevices();
            this.midi4jOut.connect("OUT", 1, true);

            System.out.println("\nThis Midi In Device name is: " + this.midi4jIn.getDeviceName());
            System.out.println("A possible target Device name is: " + this.midi4jIn.getTargetDeviceName(5));
            System.out.println("and its Port name is: " + this.midi4jIn.getTargetPortName(5));

            System.out.println("\nName of Out port id(" + 1 + ") is: " + this.midi4jIn.getTargetPortName(1));
            System.out.println("Name of In port id(" + 0 + ") is: " +  this.midi4jOut.getTargetPortName(0));

            this.midi4jIn.setCallback(process, "native", null);

            System.out.println("\nis midi4jIn device Open: " + midi4jIn.isDeviceOpen());
            System.out.println("is midi4jOut device Open: " + midi4jOut.isDeviceOpen());

//            System.out.println("MidiDevice[0]: " + midi4jOut.getMidiDevice(0, false).getDeviceName());
//            System.out.println("MidiDevice[0]: " + midi4jIn.getMidiDevice(5, false).getDeviceName());

            System.out.println("--------------------------------------------");

            this.midi4jIn.listDevices();
            this.midi4jOut.listDevices();

            keepRunning();

        } catch( MidiException me) {
            logger.error(String.valueOf(me));

//        } catch( Exception e) {
//            logger.error("An unrecoverable error occurred:\n e\n - quitting...");
        }
    }
}
