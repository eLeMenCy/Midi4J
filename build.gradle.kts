/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.1/userguide/java_library_plugin.html
 */

plugins {
    // Apply the java-library plugin to add support for Java Library
    `java-library`

    // Apply the application plugin to add support for building a CLI application.
    application
}

group = "com.elemency"
version = "1.0-SNAPSHOT"
description = "- Midi for java library (Midi4J) -\n" +
        "Midi4J provides client/server facility for Midi messages\n" +
        "The server is able to handle connections, communication and messages exchange with remote MIDI clients.\n" +
        "Requires Jack Audio to be installed on user's machine."

var javaVersion = JavaVersion.VERSION_1_8

java {
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
//    withJavadocJar()
}

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()

//    mavenLocal()

    maven {
        url = uri("http://oss.sonatype.org/content/groups/public")
    }

//    maven {
//        url = uri("http://repo.maven.apache.org/maven2")
//    }
}

dependencies {

    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api("junit:junit:4.12")

    // These dependencies are used internally, and not exposed to consumers on their own compile classpath.
    implementation("ch.qos.logback:logback-classic:1.2.3")
    implementation("com.nativelibs4java:jnaerator-runtime:0.13-SNAPSHOT")
    implementation("com.google.guava:guava:28.1-jre")
    implementation("net.java.dev.jna:jna:5.5.0")
    implementation("junit:junit:4.12")
    implementation("org.jetbrains:annotations:16.0.2")


//    implementation("com.google.guava:guava:29.0-jre")
//    implementation("com.workable:error-handler:1.1.0")

    // Use JUnit test framework
//    testImplementation("junit:junit:4.12")
    testImplementation("org.junit.jupiter:junit-jupiter-engine:5.3.1")
    testImplementation("org.junit.jupiter:junit-jupiter-params:5.3.1")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.3.1")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-params:5.3.1")

}

/********************************************************************************************
 For maven publishing see details here:
 http://bastienpaul.fr/wordpress/2019/02/08/publish-a-kotlin-lib-with-gradle-kotlin-dsl/
********************************************************************************************/
// publishing {
//    publications {
//        create<MavenPublication>("lib") {
//            groupId = artifactGroup
//            artifactId = artifactName

//            // version is gotten from an external plugin
//            version = project.versioning.info.display

//            // This is the main artifact
//            from(components["java"])

//            // We are adding documentation artifact
//            artifact(dokkaJar)

//            // And sources
//            artifact(sourcesJar)
//        }
//    }
//}

tasks {
    withType<JavaCompile> {
        options.encoding = "UTF-8"
    }

    jar {
        manifest {
            attributes(
                mapOf(
		            "Implementation-Title" to project.name,
                    "Implementation-Version" to project.version
		        )
            )
        }
    }

    test {
        useJUnitPlatform()
    }
}

application {
    // Define the main class for the application.
    mainClassName = "com.elemency.Midi4J.examples.App"
}

